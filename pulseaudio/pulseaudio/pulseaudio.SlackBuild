#!/bin/sh

# Slackware build script for pulseaudio

# Copyright 2014 Papitux <papitux.br[at]gmail.com>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is permitted provided
# that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED  BY THE AUTHOR  ''AS IS''  AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING,  BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
# INCIDENTAL,  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA,  OR PROFITS;  OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED  AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT,  STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=pulseaudio
VERSION=${VERSION:-5.0}
BUILD=${BUILD:-1}
PULSEUSR=pulse
PULSEGRP=pulse

# Add pulse user/group
export FREE_UID=`tail -1 /etc/passwd |awk -F : '{print $3 + 1}'`
export FREE_GUID=`tail -1 /etc/group |awk -F : '{print $3 + 1}'`
export PULS_USER=$PULSEUSR
export PULS_GROUP=$PULSEGRP

if ! grep --quiet '^pulse:' /etc/group ;then
  echo -e "Creating new group pulse..." 1>&2
           /usr/sbin/groupadd \
          -g $FREE_GUID \
           $PULS_GROUP 2> /dev/null
else
 if grep --quiet '^pulse:' /etc/group ;then
   echo -e "Group already exist or error creating new group..." 1>&2
 fi
fi

if ! grep --quiet '^pulse:' /etc/passwd ;then
  echo -e "Creating unprivileged user..." 1>&2
           /usr/sbin/useradd \
          -d /var/run/pulse \
          -c "Pulse user" \
          -u $FREE_UID \
          -s /bin/false \
          -g $PULS_GROUP \
           $PULS_USER 2> /dev/null
           usermod -a -G $PULS_GROUP $PULS_USER 2> /dev/null
else
 if grep --quiet '^pulse:' /etc/passwd ;then
   echo -e "User already exist or error creating unprivileged user..." 1>&2
 fi
fi

if [ -e $CWD/machine.conf ]; then
  . $CWD/machine.conf ]
else
  MARCH=$( uname -m )
  if [ -z "$ARCH" ]; then
    case "$MARCH" in
      i?86)    export ARCH=i486 ;;
      arm*)    export ARCH=arm ;;
      *)       export ARCH=$MARCH ;;
    esac
  fi
  if [ "$ARCH" = "i486" ]; then
    SLKCFLAGS="-O2 -march=i486 -mtune=i686"; CHOST="i486"
    SLKLDFLAGS=""; LIBDIRSUFFIX=""
  elif [ "$ARCH" = "i686" ]; then
    SLKCFLAGS="-O2 -march=i686 -mtune=i686"; CHOST="i486"
    SLKLDFLAGS=""; LIBDIRSUFFIX=""
  elif [ "$ARCH" = "x86_64" ]; then
    SLKCFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer"; CHOST="x86_64"
    SLKLDFLAGS="-L/lib64 -L/usr/lib64"; LIBDIRSUFFIX="64"
  else
    SLKCFLAGS="-O2"
    LIBDIRSUFFIX=""
  fi
fi

set -e

NUMJOBS=${NUMJOBS:-" -j1 "}

if ! grep ^pulse: /etc/group 2>&1 > /dev/null; then
  echo ""
  echo "  Must have a pulse group to run this script."
  echo "  # groupadd -g GID pulse"
  echo ""
  exit 1
elif ! grep ^pulse: /etc/passwd 2>&1 > /dev/null; then
  echo ""
  echo "  Must have a pulse user to run this script."
  echo "  # useradd -u UID -g pulse -d /var/run/pulse -m pulse"
  echo ""
  exit 1
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/PpTux}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ ! -d $OUTPUT ]; then
  mkdir -p $OUTPUT
fi

rm -rf $PKG
mkdir -p $TMP $PKG
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.?z*
cd $PRGNAM-$VERSION

for patch in $CWD/patch/*.gz ; do
  zcat $patch | patch -p1 --verbose || exit 1
done

sed -i -e 's/X-GNOME-Autostart-Phase=Initialization//' \
  src/daemon/pulseaudio.desktop.in || exit 1

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

autoreconf || exit 1

#  --with-database=tdb \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --mandir=/usr/man \
  --localstatedir=/var \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --enable-orc \
  --enable-alsa \
  --enable-udev \
  --enable-shared \
  --enable-asyncns \
  --enable-largefile \
  --enable-webrtc-aec \
  --disable-xen \
  --disable-ipv6 \
  --disable-jack \
  --disable-lirc \
  --disable-avahi \
  --disable-rpath \
  --disable-static \
  --disable-bluez4 \
  --disable-bluez5 \
  --disable-solaris \
  --disable-tcpwrap \
  --disable-systemd \
  --disable-hal-compat \
  --disable-oss-output \
  --disable-oss-wrapper \
  --disable-systemd-journal \
  --disable-default-build-tests \
  --with-caps \
  --with-database=gdbm \
  --with-system-user=pulse \
  --with-system-group=pulse \
  --with-access-group=pulse \
  --with-udev-rules-dir=/lib/udev/rules.d \
  --build=$ARCH-slackware-linux

# fight unused direct deps
sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0/g' libtool

make $NUMJOBS || make || exit 1
make install DESTDIR=$PKG \
  bashcompletiondir=/usr/share/bash-completion/completions || exit 1

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

( cd $PKG/usr/lib${LIBDIRSUFFIX}
  ln -sf /usr/lib${LIBDIRSUFFIX}/pulseaudio/* . )

for f in $( find $PKG/etc/pulse/ -type f ) ; do mv $f $f.new ; done

mkdir -p $PKG/etc/rc.d
cp $CWD/rc.pulseaudio $PKG/etc/rc.d/rc.pulseaudio.new

mkdir -p $PKG/var/run/pulse
chmod 750 $PKG/var/run/pulse
chown pulse:pulse $PKG/var/run/pulse

rm -f $PKG/etc/dbus-1/system.d/pulseaudio-system.conf

mv $PKG/etc/xdg/autostart/ $PKG/etc/xdg/autostart-disabled/

# Disable cork-request module, can result in e.g. media players unpausing
# when there's a Skype call incoming
sed -e 's|/usr/bin/pactl load-module module-x11-cork-request|#&|' \
  -i $PKG/usr/bin/start-pulseaudio-x11 || exit 1

if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
  for i in $(find $PKG/usr/man -type l -name "*.?"); do
  ln -s $( readlink $i ).gz $i.gz ; rm $i
  done
fi

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a ABOUT* *GPL LICENSE NEWS README todo \
  $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
if [ -f $CWD/doinst.sh.gz ]; then
  zcat $CWD/doinst.sh.gz >> $PKG/install/doinst.sh
fi

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD.${PKGTYPE:-txz}
