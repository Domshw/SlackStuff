#!/bin/sh

# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#  Docker is an open-source project to easily create lightweight, portable,
#  self-sufficient containers from any application. The same container that a
#  developer builds and tests on a laptop can run at scale, in production, on
#  VMs, bare metal, OpenStack clusters, public clouds and more.


PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

DAEMON=docker

# modify these in '/etc/docker/docker.conf'
DOCKER=/usr/bin/$DAEMON
PIDFILE=/var/run/$DAEMON.pid
LOG=/var/log/$DAEMON.log
OPTS=

PID=$(/sbin/pidof $DAEMON 2>/dev/null)

if [ -f /etc/docker/docker.conf ]; then
	. /etc/docker/docker.conf
fi

# Check if docker is present
if [ ! -x $DOCKER ]; then
	echo "$DOCKER not present or not executable"
	exit 1
fi

fail_unless_root() {
	if [ "$(id -u)" != '0' ]; then
		echo "Got Root? You must be root to execute this command!"
		exit 1
	fi
}

cgroupfs_mount() {
	# see also https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount
	if grep -v '^#' /etc/fstab | grep -q cgroup \
		|| [ ! -e /proc/cgroups ] \
		|| [ ! -d /sys/fs/cgroup ]; then
		return
	fi
	if ! mountpoint -q /sys/fs/cgroup; then
		mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
	fi
	(
		cd /sys/fs/cgroup
		for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
			mkdir -p $sys
			if ! mountpoint -q $sys; then
				if ! mount -n -t cgroup -o $sys cgroup $sys; then
					rmdir $sys || true
				fi
			fi
		done
	)
}

# Start docker:
docker_start() {
  if [ -f /proc/$PID/exe ]; then
    echo "Daemon $DAEMON alredy running."
    exit 1
  else
  echo -n "Starting $DAEMON daemon..."
  if [ -x ${DOCKER} ]; then
    # If there is an old PID file (no docker running), clean it up:
    if [ -r ${PIDFILE} ]; then
      if ! ps axc | grep docker 1> /dev/null 2> /dev/null ; then
        echo "Cleaning up old ${PIDFILE}."
        rm -f ${PIDFILE}
      fi
    fi
    nohup ${DOCKER} -d -p ${PIDFILE} ${OPTS} >> ${LOG} 2>&1 &
    echo " OK"
   fi
 fi
}

# Stop docker:
docker_stop() {
  echo -n "Stopping $DAEMON damon..."
  if [ -z "$PID" ]; then
    echo " not running."
    exit 0
  fi
  # If there is no PID file, ignore this request...
  if [ -r ${PIDFILE} ]; then
    kill $(cat ${PIDFILE})
    echo " stopped!"
   else
    echo " error!"
  fi
}

# Restart docker:
docker_restart() {
  echo "Reloading..."
  if [ -z "$PID" ]; then
    echo "$DAEMON daemon not running!"
    exit 1
  else
    docker_stop
    sleep 1
    docker_start
 fi
}

case "$1" in
'start')
  fail_unless_root
  cgroupfs_mount
  docker_start
  ;;
'stop')
  fail_unless_root
  docker_stop
  ;;
'restart')
  fail_unless_root
  docker_restart
  ;;
'status')
  if [ -f ${PIDFILE} ] && ps -o cmd $(cat ${PIDFILE}) | grep -q $DAEMON ; then
	  echo "Status of $DAEMON: running in pid $PID"
  else
	  echo "Status of $DAEMON: stopped!"
  fi
  ;;
*)
  echo "usage $0 start|stop|restart|status"
esac

exit 0
